<?xml version="1.0" encoding="UTF-8"?>


<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://localhost:8888/dtds/simple-methods-v2.xsd">
    <simple-method method-name="cdynePostalAddressFillInCounty" short-description="Cdyne PostalAddress Fill In County">
        <entity-one entity-name="PostalAddress" value-field="postalAddress"/>
        <log level="verbose" message="In cdynePostalAddressFillInCounty contactMechId=${parameters.contactMechId}; postalAddress=${postalAddress}"/>
        <if>
            <condition>
                <and>
                    <not><if-empty field="postalAddress"/></not>
                    <!-- Make sure this address in the USA, required for this CDyne service -->
                    <if-compare field="postalAddress.countryGeoId" operator="equals" value="USA"/>
                    <if-empty field="postalAddress.countyGeoId"/>
                </and>
            </condition>
            <then>
                <set field="cdyneReturnCityStateMap.zipcode" from-field="postalAddress.postalCode"/>
                <call-service service-name="cdyneReturnCityState" in-map-name="cdyneReturnCityStateMap">
                    <results-to-map map-name="cdyneResultMap"/>
                </call-service>
                <log level="verbose" message="Got result from CDyne service: ${cdyneResultMap}"/>

                <!-- Now try to find the county based on what was returned -->
                <entity-condition entity-name="GeoAssocAndGeoTo" list="geoList">
                    <condition-list combine="and">
                        <!-- Make sure that we find the county within the proper state to avoid name conflicts -->
                        <!-- In the USA the 2 letter state abbreviation is the geoId -->
                        <condition-expr field-name="geoIdFrom" from-field="cdyneResultMap.StateAbbrev"/>
                        <condition-expr field-name="geoAssocTypeId" value="REGIONS"/>
                        <condition-expr field-name="geoTypeId" value="COUNTY"/>
                        <condition-list combine="or">
                            <condition-expr field-name="abbreviation" from-field="cdyneResultMap.County"/>
                            <condition-expr field-name="geoName" from-field="cdyneResultMap.County" ignore-case="true"/>
                        </condition-list>
                    </condition-list>
                </entity-condition>
                <first-from-list entry="countyGeo" list="geoList"/>
                <if-not-empty field="countyGeo">
                    <!-- We found a county, now just save off the ID -->
                    <set field="postalAddress.countyGeoId" from-field="countyGeo.geoId"/>
                    <store-value value-field="postalAddress"/>
                </if-not-empty>
            </then>
        </if>
    </simple-method>
</simple-methods>
